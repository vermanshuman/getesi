<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:p="http://primefaces.org/ui" xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:pe="http://primefaces.org/ui/extensions">
<ui:composition template="/resources/tpl/Admin/LazyInListEditBase.xhtml">
    <ui:param name="list_title" value="#{msg.docTemplates}"/>
    <ui:param name="bean" value="#{eventListBean}"/>
    <ui:param name="entity_name" value="#{msg.event}"/>
    <ui:param name="dynamicOnComplete" value="resetFieldsJS()"/>
    <ui:define name="common_components">
        <style>
            .layout-main {
                background-color: #f2f2f2 !important;
            }
            .fc .fc-button-group > * {
                background-color: #2196F3 !important;
                border: 1px solid #2196F3 !important;
            }
            .fc-toolbar button {
                padding: .6em 1.2em !important;
                height: 2.5em;
                margin-left: 5px !important;
            }
            body .ui-widget-header {
                background: #f8f9fa !important;
                color: #495057 !important;
            }
            .fc td.fc-today {
                background-color: #a6d5fa!important;
                color: #000 !important;
                opacity: 1;
            }
            body .ui-button.ui-state-active {
                background: #0b7ad1 !important;
                border-color: #0b7ad1 !important;
            }
            .fa-angle-left:before {
                font-size: 18px;
            }
            .fa-angle-right:before {
                font-size: 18px;
            }
        </style>

        <script>
            function tpStartOnHourShowCallback(hour) {
                if (!PrimeFaces.widgets['endTimeWidget']) {
                    return false;
                }
                var tpEndHour = parseInt(PF('endTimeWidget').getHours());
                if (parseInt(hour) &lt;= tpEndHour) {
                    return true;
                }
                if (tpEndHour === -1) {
                    return true;
                }
                return false;
            }

            function tpStartOnMinuteShowCallback(hour, minute) {
                if (!PrimeFaces.widgets['endTimeWidget']) {
                    return false;
                }
                var tpEndHour = parseInt(PF('endTimeWidget').getHours());
                var tpEndMinute = parseInt(PF('endTimeWidget').getMinutes());
                if (parseInt(hour) &lt; tpEndHour) {
                    return true;
                }
                if (tpEndHour === -1) {
                    return true;
                }
                if ((parseInt(hour) === tpEndHour) &amp;&amp; (parseInt(minute) &lt; tpEndMinute)) {
                    return true;
                }
                return false;
            }

            function tpEndOnHourShowCallback(hour) {
                if (!PrimeFaces.widgets['startTimeWidget']) {
                    return false;
                }
                var tpStartHour = parseInt(PF('startTimeWidget').getHours());
                if (parseInt(hour) >= tpStartHour) {
                    return true;
                }
                return false;
            }

            function tpEndOnMinuteShowCallback(hour, minute) {
                if (!PrimeFaces.widgets['startTimeWidget']) {
                    return false;
                }
                var tpStartHour = parseInt(PF('startTimeWidget').getHours());
                var tpStartMinute = parseInt(PF('startTimeWidget').getMinutes());
                if (parseInt(hour) > tpStartHour) {
                    return true;
                }
                if ((parseInt(hour) === tpStartHour) &amp;&amp; (parseInt(minute)-1 > tpStartMinute )) {
                    return true;
                }
                return false;
            }

            $(document).ready(function() {
                setTimeout(() => {
                    $(".fc-prev-button").addClass("fa fa-angle-left");
                    $(".fc-next-button").addClass("fa fa-angle-right");
                }, 200);
            });
        </script>
<!--        <p:panel header="Calendar">-->
<!--            <p:schedule id="schedule" value="#{bean.scheduleModel}" ignoreTimezone="true" draggable="false"-->
<!--                        resizable="false" timeFormat="HH:mm" axisFormat="HH:mm">-->
<!--                <p:ajax event="dateSelect" listener="#{bean.onDateSelect}" update=":table :editPanel"/>-->
<!--                <p:ajax event="eventSelect" listener="#{bean.onEventSelect}" update="eventDetails"-->
<!--                        oncomplete="PF('eventDialog').show();"/>-->
<!--            </p:schedule>-->
<!--        </p:panel>-->
        <h5>Calendar</h5>
        <p:schedule id="schedule" value="#{bean.scheduleModel}" ignoreTimezone="true" draggable="false"
                    resizable="false" timeFormat="HH:mm" axisFormat="HH:mm">
            <p:ajax event="dateSelect" listener="#{bean.onDateSelect}" update=":table :editPanel"/>
            <p:ajax event="eventSelect" listener="#{bean.onEventSelect}" update="eventDetails"
                    oncomplete="PF('eventDialog').show();"/>
        </p:schedule>
        <ui:include src="/resources/tpl/Admin/Include/EventDialog.xhtml"/>
    </ui:define>
    <ui:define name="edit_fields">
        <p:remoteCommand name="resetFieldsJS" action="#{bean.resetFields}" update=":form:editPanel"/>
        <p:panel id="panel" visible="#{bean.hiddenPanel}" widgetVar="panelWV">
            <h:panelGrid id="panelpicker" columns="2" styleClass="ui-panelgrid-blank">
                <p:outputLabel for="from" value="#{msg.eventDate}: "/>
                <h:outputText value="#{bean.startDate}">
                    <f:convertDateTime pattern="dd/MM/yyyy" timeZone="UTC"/>
                </h:outputText>
                <p:outputLabel for="from" value="#{msg.eventStartDate}: "/>
                <pe:timePicker id="from" value="#{bean.entity.startDate}" mode="popup" showOn="button"
                               readonlyInput="true" onHourShow="tpStartOnHourShowCallback"
                               onMinuteShow="tpStartOnMinuteShowCallback" widgetVar="startTimeWidget"
                               style="width:87%"/>
                <p:outputLabel for="to" value="#{msg.eventEndDate}:"/>
                <pe:timePicker id="to" value="#{bean.entity.endDate}" mode="popup" showOn="button" readonlyInput="true"
                               style="width:87%" onHourShow="tpEndOnHourShowCallback"
                               onMinuteShow="tpEndOnMinuteShowCallback" widgetVar="endTimeWidget"/>
                <p:outputLabel for="text" value="#{msg.eventText}: "/>
                <p:inputTextarea id="text" value="#{bean.entity.text}"/>
            </h:panelGrid>
        </p:panel>
    </ui:define>

    <ui:define name="columns">
        <f:facet name="header">
            <h:outputText value="#{bean.startDate}" style="font-weight:bold">
                <f:convertDateTime pattern="dd/MM/yyyy" timeZone="UTC"/>
            </h:outputText>
        </f:facet>
        <p:column headerText="#{msg.eventStartDate}">
            <h:outputText value="#{item.startDate}">
                <f:convertDateTime pattern="HH:mm" timeZone="UTC"/>
            </h:outputText>
        </p:column>
        <p:column headerText="#{msg.eventEndDate}">
            <h:outputText value="#{item.endDate}">
                <f:convertDateTime pattern="HH:mm" timeZone="UTC"/>
            </h:outputText>
        </p:column>
        <p:column headerText="#{msg.eventText}">
            <h:outputText value="#{item.text}"/>
        </p:column>
    </ui:define>
</ui:composition>
</html>
